---
substitutions:
  name: esp32-s3-box-3
  friendly_name: ESP32 S3 Box 3
  loading_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/loading_320_240.png
  idle_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/idle_320_240.png
  listening_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/listening_320_240.png
  thinking_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/thinking_320_240.png
  replying_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/replying_320_240.png
  error_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/error_320_240.png
  timer_finished_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/timer_finished_320_240.png

  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "FFFFFF"
  thinking_illustration_background_color: "FFFFFF"
  replying_illustration_background_color: "FFFFFF"
  error_illustration_background_color: "000000"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"
  voice_assist_timer_finished_phase_id: "20"

  # These unique characters have been extracted from every test file of every language available on https://github.com/home-assistant/intents (14 March 2024)
  # However, the Figtree font only contains Latin characters, so there is no point using this... unlessyou change the font configuration accordingly.
  allowed_characters: " !#%'()+,-./0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWYZ[]_abcdefghijklmnopqrstuvwxyz{|}°²³µ¿ÁÂÄÅÉÖÚßàáâãäåæçèéêëìíîðñòóôõöøùúûüýþāăąćčďĐđēėęěğĮįıļľŁłńňőřśšťũūůűųźŻżŽžơưșțΆΈΌΐΑΒΓΔΕΖΗΘΚΜΝΠΡΣΤΥΦάέήίαβγδεζηθικλμνξοπρςστυφχψωϊόύώАБВГДЕЖЗИКЛМНОПРСТУХЦЧШЪЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяёђєіїјљњћאבגדהוזחטיכלםמןנסעפץצקרשת،ءآأإئابةتجحخدذرزسشصضطظعغفقكلمنهوىيٹپچڈکگںھہیےংকচতধনফবযরলশষস়ািু্చయలిెొ్ംഅആഇഈഉഎഓകഗങചജഞടഡണതദധനപഫബഭമയരറലളവശസഹാിീുൂെേൈ്ൺൻർൽൾაბგდევზთილმნოპრსტუფქყშჩცძჭხạảấầẩậắặẹẽếềểệỉịọỏốồổỗộớờởợụủứừửữựỳ—、一上不个中为主乾了些亮人任低佔何作供依侧係個側偵充光入全关冇冷几切到制前動區卧厅厨及口另右吊后吗启吸呀咗哪唔問啟嗎嘅嘛器圍在场執場外多大始安定客室家密寵对將小少左已帘常幫幾库度庫廊廚廳开式後恆感態成我戲戶户房所扇手打执把拔换掉控插摄整斯新明是景暗更最會有未本模機檯櫃欄次正氏水沒没洗活派温測源溫漏潮激濕灯為無煙照熱燈燥物狀玄现現瓦用發的盞目着睡私空窗立笛管節簾籬紅線红罐置聚聲脚腦腳臥色节著行衣解設調請謝警设调走路車车运連遊運過道邊部都量鎖锁門閂閉開關门闭除隱離電震霧面音頂題顏颜風风食餅餵가간감갔강개거게겨결경고공과관그금급기길깥꺼껐꼽나난내네놀누는능니다닫담대더데도동됐되된됨둡드든등디때떤뜨라래러렇렌려로료른를리림링마많명몇모무문물뭐바밝방배변보부불블빨뽑사산상색서설성세센션소쇼수스습시신실싱아안않알았애야어얼업없었에여연열옆오온완외왼요운움워원위으은을음의이인일임입있작잠장재전절정제져조족종주줄중줘지직진짐쪽차창천최추출충치침커컴켜켰쿠크키탁탄태탬터텔통트튼티파팬퍼폰표퓨플핑한함해했행혀현화활후휴힘，？"
的是不我一有大在人了中到資要可以這個你會好為上來就學交也用能如文時沒說他看提那問生過下請天們所多麼小想得之還電出工對都機自後子而訊站去心只家知國台很信成章何同道地發法無然但嗎當於本現年前真最和新因果定意情點題其事方清科樣些吧三此位理行作經者什謝名日正華話開實再城愛與二動比高面又車力或種像應女教分手打已次長太明己路起相主關鳳間呢覺該十外凰友才民系進使她著各少全兩回加將感第性球式把被老公龍程論及別給聽水重體做校裡常東風您灣啦見解等部原月美先管區錯音否啊找網樂讓通入期選較四場由書它快從歡數表怎至立內合目望認幾社告更版度考喜頭難光買今身許弟若算記代統處完號接言政玩師字並男計誰山張黨每且結改非星連哈建放直轉報活設變指氣研陳試西五希取神化物王戰近世受義反單死任跟便空林士臺卻北隊功必聲寫平影業金檔片討色容央妳向市則員興利強白價安呵特思叫總辦保花議傳元求份件持萬未究決投哪喔笑貓組獨級走支曾標流竹兄阿室卡馬共需海口門般線語命觀視朋聯參格黃錢修失兒住八腦板吃另換即象料錄拿專遠速基幫形確候裝孩備歌界除南器畫訴差講類英案帶久乎掉迷量引整似耶奇制邊型超識雖怪飛始品運賽費夢故班權破驗眼滿念造軍精務留服六圖收舍半讀願李底約雄課答令深票達演早賣棒夠黑院假曲火準百談勝碟術推存治離易往況晚示證段導傷調團七永剛哥甚德殺怕包列概照夜排客絕軟商根九切條集千落竟越待忘盡據雙供稱座值消產紅跑嘛園附硬雲遊展執聞唱育斯某技唉息苦質油救效須介首助職例熱畢節害擊亂態嗯寶倒注停古輸規福親查復步舉魚斷終輕環練印隨依趣限響省局續司角簡極幹篇羅佛克陽武疑送拉習源免志鳥煩足館仍低廣土呀樓壞兵顯率聖碼眾爭初誤楚責境野預具智壓係青貴順負魔適哇測慢懷懂史配嗚味亦醫迎舞戀細灌甲帝句屬靈評騎宜敗左追狂敢春狗際遇族群痛右康佳楊木病戲項抓徵善官護博補石爾營歷隻按妹里編歲擇溫守血領尋田養謂居異雨止跳君爛優封拜惡啥浪核聊急狀陸激模攻忙良劇牛壘增維靜陣抱勢嚴詞亞夫簽悲密幕毒廠爽緣店吳蘭睡致江宿翻香蠻警控趙冷威微坐週宗普登母絡午恐套巴雜創舊輯幸劍亮述堂酒麗牌仔腳突搞父俊暴防吉禮素招草周房餐慮充府背典仁漫景紹諸琴憶援尤缺扁罵純惜授皮松委湖誠麻置靠繼判益波姐既射欲刻堆釋含承退莫劉昨旁紀趕製尚藝肉律鐵奏樹毛罪筆彩註歸彈虎衛刀皆鍵售塊險榮播施銘囉漢賞欣升葉螢載嘿弄鐘付寄鬼哦燈呆洋嘻布磁薦檢派構媽藍貼豬策紙暗巧努雷架享宣逢均擔啟濟罷呼劃偉島歉郭訓穿詳沙督梅顧敵協輪略慧幻臉短鷹衝朝忍游河批混窗鄉蛋季散冊棄熟獎唯藏婚鏡緊猜喝尊乾縣伯偏偷秋層顆食淡申冠衣僅帳贊購犯敬勇洲束鬥徒嘉柔績笨擁漂獅詩圍乖孤姓吸私避範抗蓋祝序曉富譯巨秀餘輝插察慶積愈端移宮揮爆港雪碩借帥丟括掛盤偶末廳朱凡驚貨滅醒虛瑞拍遺忠誌透烈銀頂雅諾圓熊替休材挑俠雞累互掌唸米伴輔降豪籃洗健飯憐瘋宏困址兮操臨騙咧藥綠尼蔡玉辛輩敏減彼街聚郎泡恨蘇縮樞碰採默婆股童符抽獲宇廢贏肯砍鋼歐屆禁蒼脫漸仙淚觸途財箱厭籍冰濤訂哭穩析傑堅橋懶賢絲露森危佔茶慣塵佈爸階夏誼瓶哩慘械隱豐旅椰亡汽貝娘寒遭吹暑珍零刊郵村乃予賴搖納煙倫尾狼浮骨杯隔洪織詢振忽索惠峰席喵胡租款擾企刺芳鼠折頻冒癡陰哲針伊寂嘴倚霸揚沉悔蟲菜距複鼓摩鄭莊副頁燒弱暫剩豆探耐祖遍蕭握愁龜哀髮延庫隆盟傻眉固秘卷搭昭寧託辯覆吵耳閒撥沈昇胖丁妙殘違稍媒憂銷恩顏船奈映井拼屋乘京藉洞川憲擬寢塞倍戶擺桌域勞賺皇逃鴻橫牙拖齊農滾障搬奶烏瞭鬆戴譜酷棋嚇摸額瓜役怨染迫醉鎖震床鬧佩牠徐尺干潮帽盛孫屁淨凱撞迴損伙牽厲惑羊冬桃艦眠伍溪飄泰宋圈競閃縱崇滑乙俗淺蓮紫溝旋攝聰毀庭麥描妨勒儀陪榜闆慕耀獻審蟹巷諒姊逐踏岸葛臥洽寞邦藤拳阻蠍麵殊憑拒池邪航驅裁翔填奧函鎮丌寬頗槍遙穹啪閱鋒砂恭塔賀魂睛逸旗薩丸厚齋芬革庸舒飲閉勵頓仰閣孟昌訪緒裕勿州闡搶掃糊宙嘗菩賜赤喊盜擎勸奮慈儘污狐罰幽准兼尖彰灰番衡鮮擴毫誇砲拆監欄遲証傾鬱汪紛托漏渡姑秒吾窩輛齡跌浩肥獸煞抹酸稅陷谷沖杜胸甘胞誕豈辭牆涼碎晶邱邏脆噴玫娃培咱潛祥築孔柏叭邀猶妻估荒袋徑垃傲淑圾旦億截幣羽婦泥欺弦籌捨忌串伸喇恥繁廖逛勁臭魯壯捕窮拔于醜莉糟炸坡蒙腿坦怒甜韓緩悉扯割艾胎恆玲朵泉湯猛駕幼坪巫彎膽昏鞋怡吐唐悠盾躍侵丹鑑澤薪逝彥后召呂碧晨辨植痴瑰釣軒勤珠濃悟磨剪逼玄暖躲洛症擋敝礙亨遜蜜盼姆賦彬壁繳捷乏戒憾滴桑菲嫌愉爬惱刪嘆抵棚摘蔣箭夕翁牲蹟勉萊潔貪恰曰僑滄咖唷扣采奔泳跡涯奪抄療署誓盃騷翼屠咪霧涉鍾踢謀犧焦涵礎繞俱霹壢唬氏徹吝曼壽粉廉炎禍耗炮啡肚貢鼻挖貌捐融筋云穌撿飽鈴靂鳴奉燃飾繪黎捲恢瞧茫幅迪柳瑜矛吊侯瑪撐薄敦擠墨琪凌側楓嗨梯梁廷儒咬嵐覽兔怖稿齒獄爺邁悶喬姿蹤賓傢弘韻嶺咦褲殼孝仇譽妮懼促駛疼兇粗耍糕仲裂吟陀賭爵哉虧鍋刷旭晴蝶闊洩頑牧契轟羞拾錦逆墮夾枝瓦舟悅惹疏銳翹哎綜綱扇駐屏堪彌貫愚抬喂靖狠餅凝鄰擦滋坤蛙災莎毅卒汝征贈斗拋秦辱塗披允偵慾夥朗笛劫魅欽慰荷挺矣迅禪遷鹿秤彭肩讚丙鵝痕液漲巡烤賤丈趨沿濫措么扭捉碗爐髒叔祕腰漠翅余膠妥謠缸芒陵雯軌蝦寸呦灑貞蜂鑽廁鶴摔盒虫氛悄霖愧斜屍循倆堡旺噁叉燕津臣喪茂椅纏刑脈杉泊撒遞疲桿趁欠盈晃蛇牡慎粒繫倦溜遵腐疾鴨璃牢劣患祂呈渾劑妖玻塑飆伏弊扮儂渴歪苗汗陶棟琳蓉埋叡澎併泣騰柯催暢勾櫻阮斥搜踩返壇垂喚儲販匆添坑柴鄧糖昆暮櫃娟腹煮泛稀茲抑攜芭框彷罐虹拷萍臂襲敘吻仿賊羯浴体翠燦敲脅侶蟻秩佑謹寡岳賠掩匙曹紐籤晉喻綿詠攤馨珊孕杰拘喲羨膚肝袍罩叛禦謎嫁廟腸謊潘埔卜占攔煌俄札驟陌澄倉匪宵鈕崗盪卸旨粽貿舌曆叮咒鑰蘋祭屈陋雀睹媚娜誘衷菁殿撕蠢惟囂踴跨膀筒紋乳仗軸撤潭彿桂憤捧袖埃壹赫謙匯魏粹傅寮猴衰辜懇桶吋衫瞬凍獵瓊卿戚卓殖潑譬翰刮斌枉樑龐閩宅麟宰梭糾叢雕澳斃穎腔佇躺划寺鍊胃昂勳驕卑螞墓冥妄董淋盧償姻砸踐殷潤銅盲扎駁濕湊炒尿穴蟑拓詭謬淫蕩鼎斬堯偽餓馳蚊瘟肢挫槽扶兆僧昧螂匹芝奸聘眷熙猩癢帖貧賄撲籠丘顛訝瑋尹詗柱袁漆毋辣棍矩佐澡淵痞矮戈勃吞肆抖咳亭淘穗黏岡歧屑攏瀟諧遣診祈霜熬饒闖婉緻雁覓諷膜掙斤帆鋪淒瑟艇壺苑懸詹詮濾掰稚辰募懿慨哼汁佬纖肅遨漁恕蝴墊昱竿縫蹈鞭僕豫岩輻歹甄斑淹崎駿薰婷寵棵弓犬涂剎郁坎煎螺遮枯颱昔癮蒂墜唔瞎箏唇錶籲冤禱甩傘醬范焉嬌駝淪碳沾撫溶疊几蠟湧氧絃娛皓奴頹嘎趟揭噹剝墾狹魁坊鹽屎郝珮摧栗菊瘦鈞匿磚噓縛嘟盆債霞挽逍畔蘊頸穫畏餵脾姬赴囊噪熄錫訣肇璋暈濁伐峽竊枕倘慌垮帕瑩琦廂渺臟削鑼虐豔薇霉衍臘喧娶遂睜裙韋矢伺釘嬰蓄姦廿堵葬蓬鴉嚐挨蕾璿摯券廚醇呻霍剃漿葡暨濱履撈咕耕棉爍尉艱妓棺鵬蒸癌緯菌撇懲綁甫崩魄拂汰氓歇蘿嘸萄蕃曝疋嚮胏燭膩襄妝髓樸薯頌薛灘橘貳嘲歎枚侮豹巢酬碑翩蠶遼礦屢譴卵撰攀肌馮宴盞阪浦迦頒煉尬脹闢艘株祇湘飼爹梨嘍侍疫鵰黯并鋁弗爪鄙釵栽狸諮柄悸喉擅劈秉芷裸鏘賈逗寓咚璞燙鉛嘯炳嶼豎惶仕挪柵迄頃窄鷗鰱郊倩兜繭磊抒夷綽溯拙僚芙杖潰凶鴿妒沌祺吶卦聆棲蠅佮唾彙楣匠蛛悼舜耿瞄芋瞞竭茵吼苛浸拯剋荳沛掠廊凸攪俺酌倡朦蕉暱煥掏蟬燄狄繩惰芽裹宛御贖燥滔貶悍袂墳頡啤押尷顫鈍腥締糧啞檳簿斧腫綸僵齣轄蹲敷喘紮釀祐肖癒隧嗜檬逕碌襟凋圭寇汙哨倪筠樺詐姜旬禿脂噢撼釁庚炫譚慚澀崔貸鬍曬琉捏綺膝拭闇醋膨槓鑫瀑喃剖襪逾涅扳惘凳呃掘捍榔竅蝸曠梵暇稻檸抉輾蔚鉤蔔鶯匡蜘禎嗶窟亟諦溢黛晦伶逮傍蔥刁堤恍匣諜禧轎聳瀚斐忿泓拐驢罕沫綻刃窈渝仄瑛葵嚕繡奕窺瀏隸蔽仟斂丞詰鱉疤膏錐窕皺晰暉舅孰煽姚鈔袱絆焚蘆鹹沮嘔瞪淳丐茹槃菱篠涕襯蝕溉瑄翟怠鈺軀肺擲丑奢蔭靶紗芸佰峻阱哄腎庄囡闌戳腕菸凹蟾蒐呱巾雛螃盯饋壟毓犀逞姨穆樵閥瀰蹺擱隙疵憧懺琨闕萱悵輒搏榕飢搗渣眺虞俯紳謗瓏咫俏淆蜀楠乞詛勻貂寰迋敞跪囚溺駱憬葦脊瑤疆乍杆眸竄孽卅夭簧徘饅趴鎚啼冗緝絮啄沸萃嘶鴛禽憊徨屐輿邂掀嫖苟檯矯鐸稜嘩徊拱蕙徬滯吠妞氾芹叩朽儕赦汐丰虔茅棠崙膳魎儡鴦懦滲邵筱畜崖瑕蕊揣擒挂屯莽矽侏弧澈餃奎裘塌餌偎瀉蔓彗樽銜茍磋萎廓憫鑄莖殲壤澆蚤恃瞻拚汀椒嚼粥磅佫勘脖噸瀾鍛笙厄嚷伽徽隅寥繽簾烘茜馴噎廈閏煤鏈鏽誡頰俐曳蓓曖郤淌喀崑蔑峙躁菇逅雇毆泌酥繕莓轅駭巍糗扛杏茁琵礁穢岔僻焊嗡誦瞌捌遁贓渦琮卯鋸扔甦鄒蒞隘蹋湛晝岫蟄樁藐汲祿皂瀨絨耽糞粵滷曜懋咎痘聶垢瞳閔睿跤鑒躬斟淇莒毯倖騁岱廬殃橄恤嘰鱗濛芥欖楷硫苔麒椎禹喙釐裊亥倌吭訶裔梓驀巖幟瓣狡惕矇怯嫩龔嚎豚埠暸唆妃瓢蹄廝譏啃琶愿噱狷搪氫橙咆靡砌筷兌溼呸鍍踹塚祟懈朮搓攸橡膛俞祉冀炊瓷遐攬鷺茄蜢塘郡韜挾牟糙閻旻贅霆呎炭霄媳瘤猿颺煚鎧蝠鉅苓傀燼墅璇睏愣恬嫉瑣嫂淼梳憎摟藻酵屜陡摺簫饗桐蚱曦璧偈蹦昶嚨錚嗤戌屌耘裳啾嶸胺篤烹鞏厝疚鷥洶薔沐咽烙畸諱揍曙銬朔涓睬磯岐悽鯽楞鯉荊偕徜饑骯藹轍恁霈誅鞠茉煜傭嗓酹曇銓艷繃峨揉珈鵑誨臆焰雋熔堇韌扒憨舵肛戊壩摳骷碘鞍冕榨肘羔哺霓巳鏟蚵惆駒擷稽羹紡蛻趾弔豁褪癸眨臻慷蝙朧沼艙柚抨葭枷靨硝絢絞纜訕褚硨嫣蒲丫鸚蒹憩懊聾盎婊盔巒矜凜舖鵡蜴惚疇羈媛塹汎瘡韶憋祁詬搔蜥袒奄忱玖拌悴祠扼髏筑蛤茱騏捶鬚亢葔艸篩嶽糢慵戮跎砰侖煒籬笈癱吏痊庶厥棘娑沁窘鯨縷鹼儼棧蔬鳩閑迢恣昀泠漣眩噫娥荼鱷鏢侃虜俾樟榴嚀炬竇笠翱莘躇翡薑梟匕藩徉觴揀吱皈墉傌梢巔躊萌幌杭僥欒奠痲夸瘖芯蟀驛耨禾瑾塾儉沱腺櫥殭惋擻噗嗆抴蛀渲酋跆埸嬉愴噶耙憔撓羲扑眶蠣蹉孵澱慟灸愕淤狙檻嗈霎嗽兢瑚冉甸怔蠹綴諂灼紊彤荐詣眛稟餾蒜窯訐机炯頤繆扉嵩緬朕蟋瀕剔侷釷肋噩佢揖圳蕪褻嶄踅蜻塢綾冶惦梧罣殆兀訟臼踮炙雌嘖褒竺匈葳旱骰閹甭訢霏酪雍飪勛煦漓嫻揪囝嬋佼玟葷俘癖瞋咄幢迂蓊疹儸桔訛籐瞇猖泄鑿咻晏誣漪辮藺癥妾琇蜓烽舔娣汶詔侈膺渚槌鞘噬咐璀肪羚羿葫箔庇儷囑顱璽褐擂遑縈罹粘慄釗彪瘀蛾餒洹諭胚卉拇熾睦鯊碴辟漱窒惺譎勦迺臀瘓褔渠弋咸貍吽痔靄軾姥璁鈣漾跛翎磷噯吩敕氮鮑俟婿尪諺愷裴汞剿瞥氯槳仝瀛骸鉗鎔靚漩攘垣荻咯簣茗桓滸椏珀痠靴咀穀矗瘴璟籽晒瀝弩洸婪翊揹俑磕暐撩崢鵲昕寐徙遴濯堉跋隕丕簇鸝筍鬢竑繹鎳闋燿胥蚓嗔嬴榷尸蜍夙睞蚯謾璜湄鰻棕箋垚蠱訥鴕痺殉墟旄檀竣熹沂峭葾拈隍韃嗅佯蚣躪僱乩麓酗寅洒媲矚鋇誹拗朴罔螳撮睽漬摹捫搧蹂媄紓蔗曄隼憚睭箍奚擄咿瀆霾叨邃稠淮驍咩岑聿吮銃癲敖蜈鈑滂酉芻諳虱坷笆竽梖賏閨浙疙蓁烷喈跩酣卍遏亙贔万掐蛹驥樊雱戾彆匱崛咨湃賬粟譙驂焜濺漳欸葆瘩剷恙陞榻潞哞錘琢簷仆厘篷揆遽峘圃町餿潢嶇蟆嚥慫琬鑲姪庵瞑賂澹杵苯劭忡棗佗摻捅邇衿饕皎娓鎘糯垠潺佣柿綢庠濂逑狽踝鯰傜叱緹懵橢貽猥鬨咁粱迭邰悚榆膿冇寨鎂摒徠嗦烜萼壬詫碇鑣錨迥孚隴豺悖搥鈦肄臍嗩詼拎戎崚喳鱈嗣砥枋沽渥黝魷殤蔫爻籟孜恿衙痣驤攢鎗閘孺洄昊踼沃妍拽牯逵泯齷鑾鏞雉梗麾胤馥髦璨浣鼐唄腑吁牒狒痰剌剽篡沬馭輦貯妲盥莞闔筏燉紜雩澗筐藕垓垛齁鐽餡芮菠綏躄諄琅汨鮭啜晤愜苞毗倏哮伎杞歛荃呷麴糜旳緋餞顰煇荀悱鸞畝齪仞愫灶栩浬靦坍嗖冽偌巿蒨隋劾裱蜃蚌吆毘鰭釧潦缽嗙齦柒娼脕徛倔唏黴碾瞰蝗魘譁鈿悻螫唧覷籮窠薏踱浯腆烸睫謐舫癟晌埵乒劊娉捻謨鋤閤屹哽蜿逄姍獗帑蹶檜鼾陲窿箇獃蝌礪蛟楨匝夯乓傯諫弭俸燁弼磺捆磐荏吒崁泱謔窪嵌栓踵鞦酯鉀茸弛葯萏瀅玠鷸鉦躋嬤蚪鰍燊捱狩骼掬醞祀琛獺箝菡隹鄺楔繾詒嬸擘慍釆稔槭摃帷黌鐮鼴芎埤邢囈縹騖鈾偃閭恫瞿蟒淦湮滌琥軋槙忝崧謅颯喋舶箕墩噠晾砷濡猾閡韆琍宦樕鯛佞叟糰沅瘍嗇眈餚豨囤襠蕨胱愎稼嵋瑙稷忖薈嫵嚏箴綣湍爰頷痧戕絹嗝褓梆晞錮剁懾嗟瀧諍暝幗牴璉昴詡篆攫甯睨緞蹬犁蛆詆纓睪婢儻霽瑯燻啻捎皿暄躅喫宥埕渙怦儐鰣迸釜躑簑僮玆衲杳姒嬿忪鯤槁饞甡癩咋翌栱嘮軼馱鉻駑阜啐猷癈蝨淂楹氨菅濘戟拮踞忐驊彧紕罈郢聒跚犛駟姣謫堐忑銲餉鈉婁倭胭邋秧惻宸鱸妤椿鋰蝟嶙醺啵嘈逖涘爿鹵鮀滕蓀殯嫦臧峋坻暾鬩鈃俎据蜒褉邑緲涎沚滬綵袓軔蛢捺拴耆柑潁浚喟棣嗷熨挓甕槐娩鑞蕤腋瘁鏗澍莠糸悌勺涌枰伝鋅飴幡鑠胯岌痢姝誑醃瞠晡獠膫腮唰榛烯膊淅紂佶葩嫡獰緘諉帛甬芩蹛璣鷲豊倜蹴鏤坵腓邸脯燬菀犢珂盅挹燴錡胳叼餛猝諛卞儔雎菫炘鵠酮氟桀帚荔洱窖藪蔻摀鍰苳夤璐恚沝氦顎遢渤舀獼碉呣矬菈氰韭帘謁噤蓑蹼棹焢擰臾疝蛭捀烊紲衹邈踽尻淙銂嘹夆涪肓颳庖鳶炤跺愍啷謳壑轆胛絳匾臊壅睇忉刈蹙泵珣孃畦蠋戍蝎羡兀靳歿伕蹣佚囪嚶趺贀脩礫臬罄艋鄔掣鎢繚蹧撬譟矕哆膾粼孑氐嗄痙贛揩芊昝躡鼬甥拄熒猙鮫躂謢趐陛詘苹拺靼愔捩硐稹淩頇桎刎榭蠕埂迵罡顥圜賃墬纔刨筊彊筌葄蹊壼欉諼脛宕珪椆揶蓼貲屄覦鷓彫摑賸扈淬賁蝣綑潸瘐玎輟賑鴝嘀昃婬囿坳滮蔘飩雹畀渭掔綩胝搾軂覬崽沓褸袞儺虌嗲柰鏖崴濠鶩忒揄攣韁銼筵鴣糠礡亳幔宓瓚陝腱誏愾鰲玷讒鬟栲簍旌幄翳棻蕎靛鐺唅軛壕褟羌撂獷訖洵錠髻齰胼桹砝涔仃黔卬涸婀攙梏蛔偆纂堀倬晟紘鋃琱玹凊寤鮪囥珞蚜豋搵倨皕戡迤埼臏儆擤紈忻蠔熇囍毐甌祚蜉駢懟褊鎊熏俚恪觔鎯踫弁啣錕芍蕁擢盹听暘斡痍忸輊
  # Add support for non-unicode characters by using better glyphset
  font_glyphsets: "GF_Latin_Core"
  # for Greek use "Noto Sans" for other languages use a compatible font family
  font_family: Noto Sans SC

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  name_add_mac_suffix: true
  on_boot:
    priority: 600
    then:
      - script.execute: draw_display
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display

esp32:
  board: esp32s3box
  flash_size: 16MB
  cpu_frequency: 240MHz
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"

psram:
  mode: octal
  speed: 80MHz

api:
  on_client_connected:
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: draw_display

ota:
  - platform: esphome
    id: ota_esphome

logger:
  hardware_uart: USB_SERIAL_JTAG

wifi:
  networks:
  - ssid: "YuChen WIFI"
    password: "1234567890"
  ap:
  on_connect:
    - script.execute: draw_display
  on_disconnect:
    - script.execute: draw_display

captive_portal:

button:
  - platform: factory_reset
    id: factory_reset_btn
    internal: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    id: left_top_button
    internal: true
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - switch.turn_off: timer_ringing
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

output:
  - platform: ledc
    pin: GPIO42
    id: backlight_output

light:
  - platform: monochromatic
    id: led
    name: Screen
    icon: "mdi:television"
    entity_category: config
    output: backlight_output
    restore_mode: RESTORE_DEFAULT_ON
    default_transition_length: 250ms

i2c:
  scl: GPIO2
  sda: GPIO1
  scan: true

pca9554:
  - id: my_pca9557_io
    address: 0x19 # 設定PCA9557的I2C位址
    pin_count: 8

switch:
  - platform: gpio
    name: "ST7789V CS"
    id: st7789v_cs_pin
    pin:
      pca9554: my_pca9557_io
      number: 0 # 對應PCA9557的IO0
      mode: OUTPUT
      inverted: false

switch:
  - platform: gpio
    name: "Audio Amplifier PAEN"
    id: audio_paen_pin
    pin:
      pca9554: my_pca9557_io
      number: 1 # 對應PCA9557的IO1
      mode: OUTPUT
      inverted: true
      
switch:
  - platform: gpio
    name: "PCA9557 cam"
    pin:
      pca9554: my_pca9557_io
      number: 2
      mode: OUTPUT
      inverted: true

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO13
    i2s_bclk_pin: GPIO14
    i2s_mclk_pin: GPIO38

audio_adc:
  - platform: es7210
    id: es7210_adc
    bits_per_sample: 16bit
    sample_rate: 16000
    address: 0x41
 
i2c.write:
  address: 0x41
  data: [0x0B, 0x00]  # 關閉 MIC3
- i2c.write:
  address: 0x41
  data: [0x0C, 0x00]  # 關閉 MIC4

switch:
  - platform: template
    name: "MIC3"
    turn_on_action:
      - i2c.write:
          address: 0x41
          data: [0x0B, 0x1F]   # 開啟 MIC3
    turn_off_action:
      - i2c.write:
          address: 0x41
          data: [0x0B, 0x00]   # 關閉 MIC3

switch:
  - platform: template
    name: "MIC4"
    turn_on_action:
      - i2c.write:
          address: 0x41
          data: [0x0C, 0x1F]   # 開啟 MIC4
    turn_off_action:
      - i2c.write:
          address: 0x41
          data: [0x0C, 0x00]   # 關閉 MIC4
          
audio_dac:
  - platform: es8311
    id: es8311_dac
    bits_per_sample: 16bit
    sample_rate: 48000

microphone:
  - platform: i2s_audio
    id: box_mic
    sample_rate: 16000
    i2s_din_pin: GPIO12
    bits_per_sample: 16bit
    adc_type: external

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_dout_pin: GPIO45
    dac_type: external
    sample_rate: 48000
    bits_per_sample: 16bit
    channel: mono
    audio_dac: es8311_dac
    buffer_duration: 100ms

media_player:
  - platform: speaker
    name: None
    id: speaker_media_player
    volume_min: 0.5
    volume_max: 0.8
    announcement_pipeline:
      speaker: box_speaker
      format: FLAC
      sample_rate: 48000
      num_channels: 1  # S3 Box only has one output channel
    files:
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
    on_announcement:
      # Stop the wake word (mWW or VA) if the mic is capturing
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            # Ensure VA stops before moving on
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      - not:
                          voice_assistant.is_running:
      # Since VA isn't running, this is user-intiated media playback. Draw the mute display
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - script.execute: draw_display
    on_idle:
      # Since VA isn't running, this is the end of user-intiated media playback. Restart the wake word.
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: start_wake_word
            - script.execute: set_idle_or_mute_phase
            - script.execute: draw_display

number:
  - platform: template
    id: volume_slider
    name: "Volume"
    min_value: 0.5 # 調整為浮點數，以匹配媒體播放器的音量範圍
    max_value: 0.8 # 調整為浮點數，以匹配媒體播放器的音量範圍
    step: 0.01 # 調整步長為 0.01，提供更細緻的控制
    unit_of_measurement: "" # 移除單位，因為音量通常是0.5到0.8的浮點數
    # 當滑桿的值被改變時，觸發以下動作
    on_value:
      - media_player.volume:
          id: speaker_media_player
          level: !lambda 'return x;' # 直接傳遞滑桿的浮點數值

micro_wake_word:
  id: mww
  models:
    - okay_nabu
    - hey_mycroft
    - hey_jarvis
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: speaker_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: draw_display
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
    - script.execute: draw_display
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
  on_end:
    # Wait a short amount of time to see if an announcement starts
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    # Announcement is finished and the I2S bus is free
    - wait_until:
        - and:
            - not:
                media_player.is_announcing:
            - not:
                speaker.is_playing:
    # Restart only mWW if enabled; streaming wake words automatically restart
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start:
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
    # Clear text sensors
    - text_sensor.template.publish:
        id: text_request
        state: ""
    - text_sensor.template.publish:
        id: text_response
        state: ""
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: draw_display
          - delay: 1s
          - if:
              condition:
                switch.is_off: mute
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: draw_display
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: start_wake_word
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: stop_wake_word
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display
  on_timer_started:
    - script.execute: draw_display
  on_timer_cancelled:
    - script.execute: draw_display
  on_timer_updated:
    - script.execute: draw_display
  on_timer_tick:
    - script.execute: draw_display
  on_timer_finished:
    - switch.turn_on: timer_ringing
    - wait_until:
        media_player.is_announcing:
    - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
    - script.execute: draw_display

script:
  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(s3_box_lcd).show_page(listening_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(s3_box_lcd).show_page(thinking_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(s3_box_lcd).show_page(replying_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(s3_box_lcd).show_page(error_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_muted_phase_id}:
                                id(s3_box_lcd).show_page(muted_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(s3_box_lcd).show_page(no_ha_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_timer_finished_phase_id}:
                                id(s3_box_lcd).show_page(timer_finished_page);
                                id(s3_box_lcd).update();
                                break;
                              default:
                                id(s3_box_lcd).show_page(idle_page);
                                id(s3_box_lcd).update();
                            }
                      else:
                        - display.page.show: no_ha_page
                        - component.update: s3_box_lcd
                else:
                  - display.page.show: no_wifi_page
                  - component.update: s3_box_lcd
          else:
            - display.page.show: initializing_page
            - component.update: s3_box_lcd

  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_active_timer) = output_timer;
  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if(iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(global_is_timer_active) = output;
  - id: fetch_first_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_timer) = output_timer;
  - id: check_if_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            output = true;
          }
          id(global_is_timer) = output;

  - id: draw_timer_timeline
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          id(check_if_timers).execute();
          if (id(global_is_timer_active)){
            id(fetch_first_active_timer).execute();
            int active_pixels = round( 320 * id(global_first_active_timer).seconds_left / max(id(global_first_active_timer).total_seconds , static_cast<uint32_t>(1)) );
            if (active_pixels > 0){
              id(s3_box_lcd).filled_rectangle(0 , 225 , 320 , 15 , Color::WHITE );
              id(s3_box_lcd).filled_rectangle(0 , 226 , active_pixels , 13 , id(active_timer_color) );
            }
          } else if (id(global_is_timer)){
            id(fetch_first_timer).execute();
            int active_pixels = round( 320 * id(global_first_timer).seconds_left / max(id(global_first_timer).total_seconds , static_cast<uint32_t>(1)));
            if (active_pixels > 0){
              id(s3_box_lcd).filled_rectangle(0 , 225 , 320 , 15 , Color::WHITE );
              id(s3_box_lcd).filled_rectangle(0 , 226 , active_pixels , 13 , id(paused_timer_color) );
            }
          }
  - id: draw_active_timer_widget
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          if (id(global_is_timer_active)){
            id(s3_box_lcd).filled_rectangle(80 , 40 , 160 , 50 , Color::WHITE );
            id(s3_box_lcd).rectangle(80 , 40 , 160 , 50 , Color::BLACK );

            id(fetch_first_active_timer).execute();
            int hours_left = floor(id(global_first_active_timer).seconds_left / 3600);
            int minutes_left = floor((id(global_first_active_timer).seconds_left - hours_left * 3600) / 60);
            int seconds_left = id(global_first_active_timer).seconds_left - hours_left * 3600 - minutes_left * 60 ;
            auto display_hours = (hours_left < 10 ? "0" : "") + std::to_string(hours_left);
            auto display_minute = (minutes_left < 10 ? "0" : "") + std::to_string(minutes_left);
            auto display_seconds = (seconds_left  < 10 ? "0" : "") + std::to_string(seconds_left) ;

            std::string display_string = "";
            if (hours_left > 0) {
              display_string = display_hours + ":" + display_minute;
            } else {
              display_string = display_minute + ":" + display_seconds;
            }
            id(s3_box_lcd).printf(120, 47, id(font_timer), Color::BLACK, "%s", display_string.c_str());
          }
  # Starts either mWW or the streaming wake word, depending on the configured location
  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
  # Stops either mWW or the streaming wake word, depending on the configured location
  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:
  # Set the voice assistant phase to idle or muted, depending on if the software mute switch is activated
  - id: set_idle_or_mute_phase
    then:
      - if:
          condition:
            switch.is_off: mute
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          else:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};

switch:
  - platform: template
    name: Mute
    id: mute
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - microphone.unmute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - script.execute: draw_display
    on_turn_on:
      - microphone.mute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: draw_display
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Turn off the repeat mode and disable the pause between playlist items
      - lambda: |-
              id(speaker_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      # Stop playing the alarm
      - media_player.stop:
          announcement: true
    on_turn_on:
      # Turn on the repeat mode and pause for 1000 ms between playlist items/repeats
      - lambda: |-
            id(speaker_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    icon: "mdi:account-voice"
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - wait_until:
                lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id} || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
            - if:
                condition:
                  lambda: return x == "In Home Assistant";
                then:
                  - micro_wake_word.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - lambda: id(va).set_use_wake_word(true);
                        - voice_assistant.start_continuous:
            - if:
                condition:
                  lambda: return x == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - micro_wake_word.start

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false

image:
  - file: ${error_illustration_file}
    id: casita_error
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${idle_illustration_file}
    id: casita_idle
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${listening_illustration_file}
    id: casita_listening
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${replying_illustration_file}
    id: casita_replying
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${timer_finished_illustration_file}
    id: casita_timer_finished
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: https://github.com/esphome/wake-word-voice-assistants/raw/main/error_box_illustrations/error-no-wifi.png
    id: error_no_wifi
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: https://github.com/esphome/wake-word-voice-assistants/raw/main/error_box_illustrations/error-no-ha.png
    id: error_no_ha
    resize: 320x240
    type: RGB
    transparency: alpha_channel

font:
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
      italic: true
    id: font_request
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_response
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_timer
    size: 30
    glyphsets:
      - ${font_glyphsets}

text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>32) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}
  - id: active_timer_color
    hex: "26ed3a"
  - id: paused_timer_color
    hex: "3b89e3"

spi:
  - id: spi_bus
    clk_pin: GPIO41
    mosi_pin: GPIO40

display:
  - platform: ili9xxx
    id: s3_box_lcd
    model: ST7789V
    invert_colors: true
    data_rate: 80MHz
    dimensions:
      height: 240
      width: 320
    cs_pin: st7789v_cs_pin
    dc_pin: GPIO39
    #reset_pin:
      #number: 48
      #inverted: true
    update_interval: never
    pages:
      - id: idle_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_idle), ImageAlign::CENTER);
          id(draw_timer_timeline).execute();
          id(draw_active_timer_widget).execute();
      - id: listening_page
        lambda: |-
          it.fill(id(listening_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_listening), ImageAlign::CENTER);
          id(draw_timer_timeline).execute();
      - id: thinking_page
        lambda: |-
          it.fill(id(thinking_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_thinking), ImageAlign::CENTER);
          it.filled_rectangle(20 , 20 , 280 , 30 , Color::WHITE );
          it.rectangle(20 , 20 , 280 , 30 , Color::BLACK );
          it.printf(30, 25, id(font_request), Color::BLACK, "%s", id(text_request).state.c_str());
          id(draw_timer_timeline).execute();
      - id: replying_page
        lambda: |-
          it.fill(id(replying_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_replying), ImageAlign::CENTER);
          it.filled_rectangle(20 , 20 , 280 , 30 , Color::WHITE );
          it.rectangle(20 , 20 , 280 , 30 , Color::BLACK );
          it.filled_rectangle(20 , 190 , 280 , 30 , Color::WHITE );
          it.rectangle(20 , 190 , 280 , 30 , Color::BLACK );
          it.printf(30, 25, id(font_request), Color::BLACK, "%s", id(text_request).state.c_str());
          it.printf(30, 195, id(font_response), Color::BLACK, "%s", id(text_response).state.c_str());
          id(draw_timer_timeline).execute();
      - id: timer_finished_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_timer_finished), ImageAlign::CENTER);
      - id: error_page
        lambda: |-
          it.fill(id(error_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_error), ImageAlign::CENTER);
      - id: no_ha_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_ha), ImageAlign::CENTER);
      - id: no_wifi_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_wifi), ImageAlign::CENTER);
      - id: initializing_page
        lambda: |-
          it.fill(id(loading_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_initializing), ImageAlign::CENTER);
      - id: muted_page
        lambda: |-
          it.fill(Color::BLACK);
          id(draw_timer_timeline).execute();
          id(draw_active_timer_widget).execute();
